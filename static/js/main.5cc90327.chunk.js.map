{"version":3,"sources":["App.js","utils/shuffle.js","serviceWorker.js","index.js"],"names":["App","useState","width","clickedCells","setClickedCells","R","cells","setCells","useEffect","array","tmp","i","length","j","Math","floor","random","shuffle","className","style","gridTemplateColumns","map","join","idx","key","onClick","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAwDeA,MAnDf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,aAE2BD,mBAAS,KAFpC,mBAENE,EAFM,KAEQC,EAFR,OAGaH,mBAASI,IAAQ,EAAGH,EAAQA,EAAQ,IAHjD,mBAGNI,EAHM,KAGCC,EAHD,KA+Bb,OAvBAC,qBAAU,WACRD,ECbW,SAAiBE,GAE9B,IADA,IAAIC,EAAG,YAAOD,GACLE,EAAIF,EAAMG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAgB,EAAJL,IADK,EAEtB,CAACD,EAAIG,GAAIH,EAAIC,IAA/BD,EAAIC,GAFoC,KAEhCD,EAAIG,GAF4B,KAI3C,OAAOH,EDOIO,CAAQX,MAChB,IAsBD,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAEF,yBACEA,UAAU,QACVC,MAAO,CACLC,oBAAqBf,IAAQ,EAAGH,GAC7BmB,KAAI,SAACV,GAAD,MAAO,SACXW,KAAK,OAGThB,GAASA,EAAMe,KAhCT,SAACE,GACZ,OAAIA,EAAOrB,EAAQA,EAAS,EAExB,4BACEgB,UAAU,cACVM,IAAKD,EACLE,QAAS,kBAdId,EAccY,OAbjCnB,EAAgBC,IAAA,sBAAWF,GAAX,CAAyBQ,MADvB,IAACA,IAgBZY,GAKL,4BAAQL,UAAU,OAAOM,IAAKD,GAC3BA,OAoBH,6BAAMG,KAAKC,UAAUxB,MEvCPyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5cc90327.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as R from \"ramda\";\nimport shuffle from \"./utils/shuffle\";\nimport \"./App.css\";\n\nfunction App() {\n  const [width, setWidth] = useState(4);\n  const [clickedCells, setClickedCells] = useState([]);\n  const [cells, setCells] = useState(R.range(1, width * width + 1));\n  const handleClick = (i) => {\n    setClickedCells(R.uniq([...clickedCells, i]));\n  };\n\n  useEffect(() => {\n    setCells(shuffle(cells));\n  }, []);\n\n  const Cell = (idx) => {\n    if (idx < (width * width) / 2) {\n      return (\n        <button\n          className=\"cell-active\"\n          key={idx}\n          onClick={() => handleClick(idx)}\n        >\n          {idx}\n        </button>\n      );\n    }\n    return (\n      <button className=\"cell\" key={idx}>\n        {idx}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h4>Memory Test</h4>\n      </header>\n      <div\n        className=\"board\"\n        style={{\n          gridTemplateColumns: R.range(0, width)\n            .map((i) => \"1fr\")\n            .join(\" \"),\n        }}\n      >\n        {cells && cells.map(Cell)}\n      </div>\n      <pre>{JSON.stringify(clickedCells)}</pre>\n    </div>\n  );\n}\n\nexport default App;\n","/** Fisher-Yates shuffle */\nexport default function shuffle(array) {\n  let tmp = [...array];\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i * 1));\n    [tmp[i], tmp[j]] = [tmp[j], tmp[i]];\n  }\n  return tmp;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}